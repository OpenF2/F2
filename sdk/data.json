{
    "project": {},
    "files": {
        "src\\classes\\app.js": {
            "name": "src\\classes\\app.js",
            "modules": {},
            "classes": {
                "F2.App": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\classes\\appConfig.js": {
            "name": "src\\classes\\appConfig.js",
            "modules": {},
            "classes": {
                "F2.AppConfig": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\classes\\appContent.js": {
            "name": "src\\classes\\appContent.js",
            "modules": {},
            "classes": {
                "F2.AppManifest.AppContent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\classes\\appManifest.js": {
            "name": "src\\classes\\appManifest.js",
            "modules": {},
            "classes": {
                "F2.AppManifest": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\classes\\containerConfig.js": {
            "name": "src\\classes\\containerConfig.js",
            "modules": {},
            "classes": {
                "F2.ContainerConfig": 1
            },
            "fors": {
                "F2.ContainerConfig": 1
            },
            "namespaces": {}
        },
        "src\\classes\\index.js": {
            "name": "src\\classes\\index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\constants\\appHandlers.js": {
            "name": "src\\constants\\appHandlers.js",
            "modules": {},
            "classes": {
                "F2.Constants.AppHandlers": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\constants\\css.js": {
            "name": "src\\constants\\css.js",
            "modules": {},
            "classes": {
                "F2.Constants.Css": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\constants\\events.js": {
            "name": "src\\constants\\events.js",
            "modules": {},
            "classes": {
                "F2.Constants.Events": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\constants\\index.js": {
            "name": "src\\constants\\index.js",
            "modules": {},
            "classes": {
                "F2.Constants": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\dom.js": {
            "name": "src\\utils\\dom.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\index.js": {
            "name": "src\\utils\\index.js",
            "modules": {},
            "classes": {},
            "fors": {
                "F2": 1
            },
            "namespaces": {}
        },
        "src\\utils\\uri.js": {
            "name": "src\\utils\\uri.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\appHandlers.js": {
            "name": "src\\appHandlers.js",
            "modules": {},
            "classes": {
                "F2.AppHandlers": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\apps.js": {
            "name": "src\\apps.js",
            "modules": {},
            "classes": {},
            "fors": {
                "F2": 1
            },
            "namespaces": {}
        },
        "src\\container.js": {
            "name": "src\\container.js",
            "modules": {},
            "classes": {
                "F2": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\events.js": {
            "name": "src\\events.js",
            "modules": {},
            "classes": {
                "F2.Events": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\index.js": {
            "name": "src\\index.js",
            "modules": {
                "f2": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "f2": {
            "name": "f2",
            "submodules": {},
            "elements": {},
            "classes": {
                "F2.App": 1,
                "F2.AppConfig": 1,
                "F2.AppManifest.AppContent": 1,
                "F2.AppManifest": 1,
                "F2.ContainerConfig": 1,
                "F2.Constants.AppHandlers": 1,
                "F2.Constants.Css": 1,
                "F2.Constants.Events": 1,
                "F2.Constants": 1,
                "F2": 1,
                "F2.AppHandlers": 1,
                "F2.Events": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src\\events.js",
            "line": 3,
            "description": "Open F2",
            "itemtype": "main"
        }
    },
    "classes": {
        "F2.App": {
            "name": "F2.App",
            "shortname": "F2.App",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "f2",
            "file": "src\\classes\\app.js",
            "line": 3,
            "description": "The App Class is an optional class that can be namespaced onto the\n{{#crossLink \"F2\\Apps\"}}{{/crossLink}} namespace.  The\n[F2 Docs](../../app-development.html#app-class)\nhas more information on the usage of the App Class.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "appConfig",
                    "description": "The F2.AppConfig object for the app",
                    "type": "F2.AppConfig"
                },
                {
                    "name": "appContent",
                    "description": "The F2.AppManifest.AppContent\nobject",
                    "type": "F2.AppManifest.AppContent"
                },
                {
                    "name": "root",
                    "description": "The root DOM Element for the app",
                    "type": "Element"
                }
            ]
        },
        "F2.AppConfig": {
            "name": "F2.AppConfig",
            "shortname": "F2.AppConfig",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "f2",
            "file": "src\\classes\\appConfig.js",
            "line": 1,
            "description": "The AppConfig object represents an app's meta data"
        },
        "F2.AppManifest.AppContent": {
            "name": "F2.AppManifest.AppContent",
            "shortname": "F2.AppManifest.AppContent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "f2",
            "file": "src\\classes\\appContent.js",
            "line": 1,
            "description": "The AppContent object"
        },
        "F2.AppManifest": {
            "name": "F2.AppManifest",
            "shortname": "F2.AppManifest",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "f2",
            "file": "src\\classes\\appManifest.js",
            "line": 1,
            "description": "The assets needed to render an app on the page"
        },
        "F2.ContainerConfig": {
            "name": "F2.ContainerConfig",
            "shortname": "F2.ContainerConfig",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "f2",
            "file": "src\\classes\\containerConfig.js",
            "line": 3,
            "description": "An object containing configuration information for the\n[container](../../container-development.html)"
        },
        "F2.Constants.AppHandlers": {
            "name": "F2.Constants.AppHandlers",
            "shortname": "F2.Constants.AppHandlers",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "f2",
            "file": "src\\constants\\appHandlers.js",
            "line": 1,
            "description": "Constants used throughout the Open Financial Framework",
            "static": 1
        },
        "F2.Constants.Css": {
            "name": "F2.Constants.Css",
            "shortname": "F2.Constants.Css",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "f2",
            "file": "src\\constants\\css.js",
            "line": 1,
            "description": "Constants used throughout the Open Financial Framework",
            "static": 1
        },
        "F2.Constants.Events": {
            "name": "F2.Constants.Events",
            "shortname": "F2.Constants.Events",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "f2",
            "file": "src\\constants\\events.js",
            "line": 1,
            "description": "Constants used throughout the Open Financial Framework",
            "static": 1
        },
        "F2.Constants": {
            "name": "F2.Constants",
            "shortname": "F2.Constants",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "f2",
            "file": "src\\constants\\index.js",
            "line": 5,
            "description": "Constants used throughout the Open Financial Framework",
            "static": 1
        },
        "F2": {
            "name": "F2",
            "shortname": "F2",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "f2",
            "file": "src\\container.js",
            "line": 659,
            "description": "Root namespace of the F2 SDK"
        },
        "F2.AppHandlers": {
            "name": "F2.AppHandlers",
            "shortname": "F2.AppHandlers",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "f2",
            "file": "src\\appHandlers.js",
            "line": 151,
            "description": "The `AppHandlers` functionality provides Container Developers a higher level of control over configuring app rendering and interaction.\n\n### Order of Execution\n\n**App Rendering**\n\n0. {{#crossLink \"F2/registerApps\"}}F2.registerApps(){{/crossLink}} method is called by the Container Developer and the following methods are run for *each* {{#crossLink \"F2.AppConfig\"}}{{/crossLink}} passed.\n1. **'appCreateRoot'** (*{{#crossLink \"F2.Constants.AppHandlers\"}}{{/crossLink}}.APP\\_CREATE\\_ROOT*) handlers are fired in the order they were attached.\n2. **'appRenderBefore'** (*{{#crossLink \"F2.Constants.AppHandlers\"}}{{/crossLink}}.APP\\_RENDER\\_BEFORE*) handlers are fired in the order they were attached.\n3. Each app's `manifestUrl` is requested asynchronously; on success the following methods are fired.\n3. **'appRender'** (*{{#crossLink \"F2.Constants.AppHandlers\"}}{{/crossLink}}.APP\\_RENDER*) handlers are fired in the order they were attached.\n4. **'appRenderAfter'** (*{{#crossLink \"F2.Constants.AppHandlers\"}}{{/crossLink}}.APP\\_RENDER\\_AFTER*) handlers are fired in the order they were attached.\n\n\n**App Removal**\n\n0. {{#crossLink \"F2/removeApp\"}}F2.removeApp(){{/crossLink}} with a specific {{#crossLink \"F2.AppConfig/instanceId \"}}{{/crossLink}} or {{#crossLink \"F2/removeAllApps\"}}F2.removeAllApps(){{/crossLink}} method is called by the Container Developer and the following methods are run.\n1. **'appDestroyBefore'** (*{{#crossLink \"F2.Constants.AppHandlers\"}}{{/crossLink}}.APP\\_DESTROY\\_BEFORE*) handlers are fired in the order they were attached.\n2. **'appDestroy'** (*{{#crossLink \"F2.Constants.AppHandlers\"}}{{/crossLink}}.APP\\_DESTROY*) handlers are fired in the order they were attached.\n3. **'appDestroyAfter'** (*{{#crossLink \"F2.Constants.AppHandlers\"}}{{/crossLink}}.APP\\_DESTROY\\_AFTER*) handlers are fired in the order they were attached.\n\n**Error Handling**\n\n0. **'appScriptLoadFailed'** (*{{#crossLink \"F2.Constants.AppHandlers\"}}{{/crossLink}}.APP\\_SCRIPT\\_LOAD\\_FAILED*) handlers are fired in the order they were attached."
        },
        "F2.Events": {
            "name": "F2.Events",
            "shortname": "F2.Events",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "f2",
            "namespace": "",
            "file": "src\\events.js",
            "line": 3,
            "description": "Handles [Context](../../app-development.html#context) passing from\ncontainers to apps and apps to apps."
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src\\classes\\app.js",
            "line": 17,
            "description": "An optional init function that will automatically be called when\n{{#crossLink \"F2/registerApps\"}}F2.registerApps(){{/crossLink}} is called.",
            "itemtype": "method",
            "name": "init",
            "optional": 1,
            "class": "F2.App"
        },
        {
            "file": "src\\classes\\app.js",
            "line": 24,
            "description": "An optional destroy function that will automatically be called when\n{{#crossLink \"F2/removeApp\"}}F2.removeApp(){{/crossLink}} and subsequently\nthe {{#crossLink \"F2.Constants.AppHandlers/APP_DESTROY:property\"}}F2.Constants.AppHandlers.APP_DESTROY{{/crossLink}} AppHandler.",
            "itemtype": "method",
            "name": "destroy",
            "optional": 1,
            "class": "F2.App"
        },
        {
            "file": "src\\classes\\appConfig.js",
            "line": 6,
            "description": "The unique ID of the app. More information can be found\n[here](../../app-development.html#f2-appid)",
            "itemtype": "property",
            "name": "appId",
            "type": "string",
            "required": 1,
            "class": "F2.AppConfig"
        },
        {
            "file": "src\\classes\\appConfig.js",
            "line": 14,
            "description": "An object that represents the context of an app",
            "itemtype": "property",
            "name": "context",
            "type": "object",
            "class": "F2.AppConfig"
        },
        {
            "file": "src\\classes\\appConfig.js",
            "line": 20,
            "description": "True if the app should be requested in a single request with other apps.",
            "itemtype": "property",
            "name": "enableBatchRequests",
            "type": "bool",
            "default": "false",
            "class": "F2.AppConfig"
        },
        {
            "file": "src\\classes\\appConfig.js",
            "line": 27,
            "description": "The height of the app. The initial height will be pulled from\nthe {{#crossLink \"F2.AppConfig\"}}{{/crossLink}} object",
            "itemtype": "property",
            "name": "height",
            "type": "int",
            "class": "F2.AppConfig"
        },
        {
            "file": "src\\classes\\appConfig.js",
            "line": 34,
            "description": "The unique runtime ID of the app.\n\n**This property is populated during the\nF2.{{#crossLink \"F2/registerApps\"}}{{/crossLink}} process**",
            "itemtype": "property",
            "name": "instanceId",
            "type": "string",
            "class": "F2.AppConfig"
        },
        {
            "file": "src\\classes\\appConfig.js",
            "line": 43,
            "description": "The language and region specification for this container\nrepresented as an IETF-defined standard language tag,\ne.g. `\"en-us\"` or `\"de-de\"`. This is passed during the\nF2.{{#crossLink \"F2/registerApps\"}}{{/crossLink}} process.",
            "itemtype": "property",
            "name": "containerLocale",
            "type": "string",
            "default": "null",
            "since": "1.4.0",
            "class": "F2.AppConfig"
        },
        {
            "file": "src\\classes\\appConfig.js",
            "line": 55,
            "description": "The languages and regions supported by this app represented\nas an array of IETF-defined standard language tags,\ne.g. `[\"en-us\",\"de-de\"]`.",
            "itemtype": "property",
            "name": "localeSupport",
            "type": "array",
            "default": "[]",
            "since": "1.4.0",
            "class": "F2.AppConfig"
        },
        {
            "file": "src\\classes\\appConfig.js",
            "line": 66,
            "description": "The url to retrieve the {{#crossLink \"F2.AppManifest\"}}{{/crossLink}}\nobject.",
            "itemtype": "property",
            "name": "manifestUrl",
            "type": "string",
            "required": 1,
            "class": "F2.AppConfig"
        },
        {
            "file": "src\\classes\\appConfig.js",
            "line": 74,
            "description": "The recommended maximum width in pixels that this app should be run.\n**It is up to the [container](../../container-development.html) to\nimplement the logic to prevent an app from being run when the maxWidth\nrequirements are not met.**",
            "itemtype": "property",
            "name": "maxWidth",
            "type": "int",
            "class": "F2.AppConfig"
        },
        {
            "file": "src\\classes\\appConfig.js",
            "line": 83,
            "description": "The recommended minimum grid size that this app should be run. This\nvalue corresponds to the 12-grid system that is used by the\n[container](../../container-development.html). This property should be\nset by apps that require a certain number of columns in their layout.",
            "itemtype": "property",
            "name": "minGridSize",
            "type": "int",
            "default": "4",
            "class": "F2.AppConfig"
        },
        {
            "file": "src\\classes\\appConfig.js",
            "line": 93,
            "description": "The recommended minimum width in pixels that this app should be run. **It\nis up to the [container](../../container-development.html) to implement\nthe logic to prevent an app from being run when the minWidth requirements\nare not met.",
            "itemtype": "property",
            "name": "minWidth",
            "type": "int",
            "default": "300",
            "class": "F2.AppConfig"
        },
        {
            "file": "src\\classes\\appConfig.js",
            "line": 103,
            "description": "The name of the app",
            "itemtype": "property",
            "name": "name",
            "type": "string",
            "required": 1,
            "class": "F2.AppConfig"
        },
        {
            "file": "src\\classes\\appConfig.js",
            "line": 110,
            "description": "The root DOM element that contains the app\n\n**This property is populated during the\nF2.{{#crossLink \"F2/registerApps\"}}{{/crossLink}} process**",
            "itemtype": "property",
            "name": "root",
            "type": "Element",
            "class": "F2.AppConfig"
        },
        {
            "file": "src\\classes\\appContent.js",
            "line": 6,
            "description": "Arbitrary data to be passed along with the app",
            "itemtype": "property",
            "name": "data",
            "type": "object",
            "optional": 1,
            "class": "F2.AppManifest.AppContent"
        },
        {
            "file": "src\\classes\\appContent.js",
            "line": 13,
            "description": "The string of HTML representing the app",
            "itemtype": "property",
            "name": "html",
            "type": "string",
            "required": 1,
            "class": "F2.AppManifest.AppContent"
        },
        {
            "file": "src\\classes\\appContent.js",
            "line": 20,
            "description": "A status message",
            "itemtype": "property",
            "name": "status",
            "type": "string",
            "optional": 1,
            "class": "F2.AppManifest.AppContent"
        },
        {
            "file": "src\\classes\\appManifest.js",
            "line": 6,
            "description": "The array of {{#crossLink \"F2.AppManifest.AppContent\"}}{{/crossLink}}\nobjects",
            "itemtype": "property",
            "name": "apps",
            "type": "Array",
            "required": 1,
            "class": "F2.AppManifest"
        },
        {
            "file": "src\\classes\\appManifest.js",
            "line": 14,
            "description": "Any inline javascript tha should initially be run",
            "itemtype": "property",
            "name": "inlineScripts",
            "type": "Array",
            "optional": 1,
            "class": "F2.AppManifest"
        },
        {
            "file": "src\\classes\\appManifest.js",
            "line": 21,
            "description": "Urls to javascript files required by the app",
            "itemtype": "property",
            "name": "scripts",
            "type": "Array",
            "optional": 1,
            "class": "F2.AppManifest"
        },
        {
            "file": "src\\classes\\appManifest.js",
            "line": 28,
            "description": "Urls to CSS files required by the app",
            "itemtype": "property",
            "name": "styles",
            "type": "Array",
            "optional": 1,
            "class": "F2.AppManifest"
        },
        {
            "file": "src\\classes\\containerConfig.js",
            "line": 9,
            "description": "True to enable debug mode in F2.js. Adds additional logging, resource cache busting, etc.",
            "itemtype": "property",
            "name": "debugMode",
            "type": "bool",
            "default": "false",
            "class": "F2.ContainerConfig"
        },
        {
            "file": "src\\classes\\containerConfig.js",
            "line": 16,
            "description": "The default language and region specification for this container\nrepresented as an IETF-defined standard language tag,\ne.g. `\"en-us\"` or `\"de-de\"`. This value is passed to each app\nregistered as `containerLocale`.",
            "itemtype": "property",
            "name": "locale",
            "type": "string",
            "default": "null",
            "since": "1.4.0",
            "class": "F2.ContainerConfig"
        },
        {
            "file": "src\\classes\\containerConfig.js",
            "line": 28,
            "description": "Milliseconds before F2 fires callback on script resource load errors. Due to issue with the way Internet Explorer attaches load events to script elements, the error event doesn't fire.",
            "itemtype": "property",
            "name": "scriptErrorTimeout",
            "type": "milliseconds",
            "default": "7000 (7 seconds)",
            "class": "F2.ContainerConfig"
        },
        {
            "file": "src\\classes\\containerConfig.js",
            "line": 35,
            "description": "Allows the container to fully override how the AppManifest request is\nmade inside of F2.",
            "itemtype": "method",
            "name": "xhr",
            "params": [
                {
                    "name": "url",
                    "description": "The manifest url",
                    "type": "String"
                },
                {
                    "name": "appConfigs",
                    "description": "An array of {{#crossLink \"F2.AppConfig\"}}{{/crossLink}}\nobjects",
                    "type": "Array"
                },
                {
                    "name": "success",
                    "description": "The function to be called if the request\nsucceeds",
                    "type": "Function"
                },
                {
                    "name": "error",
                    "description": "The function to be called if the request fails",
                    "type": "Function"
                },
                {
                    "name": "complete",
                    "description": "The function to be called when the request\nfinishes (after success and error callbacks have been executed)",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The XMLHttpRequest object",
                "type": "XMLHttpRequest"
            },
            "example": [
                "\n     F2.init({\n         xhr: function(url, appConfigs,successCallback, errorCallback, completeCallback) {\n          var jsonpCallback = F2.Constants.JSONP_CALLBACK + appConfigs[0].appId, // Unique function name\n         var fetchUrl = url + '?params=' + F2.stringify(appConfigs.apps, F2.appConfigReplacer);\n          var fetchFunc = fetchJsonp(fetchUrl, {\n                          timeout: 3000,\n                          jsonpCallbackFunction: jsonpCallback\n                          });\n           fetchFunc.then(function(response) {\n                          return response.json();\n                      })\n                      .then(function(data) {\n                      \tsuccessCallback(data);\n                      \tcompleteCallback();\n                  })\n                  .catch(function(error) {\n                      F2.log('Failed to load app(s)', error.toString());\n                      errorCallback();\n                  });\n         }\n     });"
            ],
            "class": "F2.ContainerConfig"
        },
        {
            "file": "src\\classes\\containerConfig.js",
            "line": 76,
            "description": "Allows the container to override individual parts of the AppManifest\nrequest.  See properties and methods with the `xhr.` prefix.",
            "itemtype": "property",
            "name": "xhr",
            "type": "Object",
            "example": [
                "\n    F2.init({\n        xhr: {\n            url: function(url, appConfigs) {\n                return 'http://example.com/proxy.php?url=' + encocdeURIComponent(url);\n            }\n        }\n    });"
            ],
            "class": "F2.ContainerConfig"
        },
        {
            "file": "src\\classes\\containerConfig.js",
            "line": 92,
            "description": "Allows the container to override the request data type (JSON or JSONP)\nthat is used for the request",
            "itemtype": "method",
            "name": "xhr.dataType",
            "params": [
                {
                    "name": "url",
                    "description": "The manifest url",
                    "type": "String"
                },
                {
                    "name": "appConfigs",
                    "description": "An array of {{#crossLink \"F2.AppConfig\"}}{{/crossLink}}\nobjects",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The request data type that should be used",
                "type": "String"
            },
            "example": [
                "\n    F2.init({\n        xhr: {\n            dataType: function(url) {\n                return F2.isLocalRequest(url) ? 'json' : 'jsonp';\n            },\n            type: function(url) {\n                return F2.isLocalRequest(url) ? 'POST' : 'GET';\n            }\n        }\n    });"
            ],
            "class": "F2.ContainerConfig"
        },
        {
            "file": "src\\classes\\containerConfig.js",
            "line": 114,
            "description": "Allows the container to override the request method that is used.",
            "itemtype": "method",
            "name": "xhr.type",
            "params": [
                {
                    "name": "url",
                    "description": "The manifest url",
                    "type": "String"
                },
                {
                    "name": "appConfigs",
                    "description": "An array of {{#crossLink \"F2.AppConfig\"}}{{/crossLink}}\nobjects",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The request method that should be used",
                "type": "String"
            },
            "example": [
                "\n    F2.init({\n        xhr: {\n            dataType: function(url) {\n                return F2.isLocalRequest(url) ? 'json' : 'jsonp';\n            },\n            type: function(url) {\n                return F2.isLocalRequest(url) ? 'POST' : 'GET';\n            }\n        }\n    });"
            ],
            "class": "F2.ContainerConfig"
        },
        {
            "file": "src\\classes\\containerConfig.js",
            "line": 135,
            "description": "Allows the container to override the url that is used to request an\napp's F2.{{#crossLink \"F2.AppManifest\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "xhr.url",
            "params": [
                {
                    "name": "url",
                    "description": "The manifest url",
                    "type": "String"
                },
                {
                    "name": "appConfigs",
                    "description": "An array of {{#crossLink \"F2.AppConfig\"}}{{/crossLink}}\nobjects",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The url that should be used for the request",
                "type": "String"
            },
            "example": [
                "\n    F2.init({\n        xhr: {\n            url: function(url, appConfigs) {\n                return 'http://example.com/proxy.php?url=' + encocdeURIComponent(url);\n            }\n        }\n    });"
            ],
            "class": "F2.ContainerConfig"
        },
        {
            "file": "src\\classes\\containerConfig.js",
            "line": 155,
            "description": "Allows the container to override the script loader which requests\ndependencies defined in the {{#crossLink \"F2.AppManifest\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "loadScripts",
            "type": "function",
            "example": [
                "\n    F2.init({\n\t\t\tloadScripts: function(scripts,inlines,callback){\n\t\t\t\t//load scripts using $.load() for each script or require(scripts)\n\t\t\t\tcallback();\n\t\t\t}\n    });"
            ],
            "class": "F2.ContainerConfig"
        },
        {
            "file": "src\\classes\\containerConfig.js",
            "line": 170,
            "description": "Allows the container to override the stylesheet loader which requests\ndependencies defined in the {{#crossLink \"F2.AppManifest\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "loadStyles",
            "type": "function",
            "example": [
                "\n    F2.init({\n\t\t\tloadStyles: function(styles,callback){\n\t\t\t\t//load styles using $.load() for each stylesheet or another method\n\t\t\t\tcallback();\n\t\t\t}\n    });"
            ],
            "class": "F2.ContainerConfig"
        },
        {
            "file": "src\\classes\\index.js",
            "line": 7,
            "description": "Class stubs for documentation purposes",
            "mainName": "F2",
            "tag": "main",
            "itemtype": "main",
            "_main": true,
            "class": "F2.Constants.AppHandlers"
        },
        {
            "file": "src\\constants\\appHandlers.js",
            "line": 7,
            "description": "When bound using {{#crossLink \"F2.AppHandlers/on\"}}F2.AppHandlers.on(){{/crossLink}} the listener function passed will receive the\nfollowing argument(s): ( {{#crossLink \"F2.AppConfig\"}}appConfig{{/crossLink}} )",
            "itemtype": "property",
            "name": "APP_MANIFEST_REQUEST_FAIL",
            "type": "string",
            "static": 1,
            "final": 1,
            "example": [
                "\n\tvar _token = F2.AppHandlers.getToken();\n\tF2.AppHandlers.on(\n\t\t_token,\n\t\tF2.Constants.AppHandlers.APP_MANIFEST_REQUEST_FAIL,\n\t\tfunction(appConfig)\n\t\t{\n\t\t\tYou can use information from the appConfig to surface a custom error message in the dom\n\t\t\tOr display some kind of default error placeholder element rather than having a blank spot in the dom\n\t\t}\n\t);"
            ],
            "class": "F2.Constants.AppHandlers"
        },
        {
            "file": "src\\constants\\appHandlers.js",
            "line": 27,
            "description": "Identifies the create root method for use in AppHandlers.on/off.\nWhen bound using {{#crossLink \"F2.AppHandlers/on\"}}F2.AppHandlers.on(){{/crossLink}} the listener function passed will receive the\nfollowing argument(s): ( {{#crossLink \"F2.AppConfig\"}}appConfig{{/crossLink}} )",
            "itemtype": "property",
            "name": "APP_CREATE_ROOT",
            "type": "string",
            "static": 1,
            "final": 1,
            "example": [
                "\n\tvar _token = F2.AppHandlers.getToken();\n\tF2.AppHandlers.on(\n\t\t_token,\n\t\tF2.Constants.AppHandlers.APP_CREATE_ROOT,\n\t\tfunction(appConfig)\n\t\t{\n\t\t\t// If you want to create a custom root. By default F2 uses the app's outermost HTML element.\n\t\t\t// the app's html is not available until after the manifest is retrieved so this logic occurs in F2.Constants.AppHandlers.APP_RENDER\n\t\t\tappConfig.root = document.createElement('section');\n\t\t}\n\t);"
            ],
            "class": "F2.Constants.AppHandlers"
        },
        {
            "file": "src\\constants\\appHandlers.js",
            "line": 49,
            "description": "Identifies the before app render method for use in AppHandlers.on/off.\nWhen bound using {{#crossLink \"F2.AppHandlers/on\"}}F2.AppHandlers.on(){{/crossLink}} the listener function passed will receive the\nfollowing argument(s): ( {{#crossLink \"F2.AppConfig\"}}appConfig{{/crossLink}} )",
            "itemtype": "property",
            "name": "APP_RENDER_BEFORE",
            "type": "string",
            "static": 1,
            "final": 1,
            "example": [
                "\n\tvar _token = F2.AppHandlers.getToken();\n\tF2.AppHandlers.on(\n\t\t_token,\n\t\tF2.Constants.AppHandlers.APP_RENDER_BEFORE,\n\t\tfunction(appConfig)\n\t\t{\n\t\t\tF2.log(appConfig);\n\t\t}\n\t);"
            ],
            "class": "F2.Constants.AppHandlers"
        },
        {
            "file": "src\\constants\\appHandlers.js",
            "line": 69,
            "description": "Identifies the app render method for use in AppHandlers.on/off.\nWhen bound using {{#crossLink \"F2.AppHandlers/on\"}}F2.AppHandlers.on(){{/crossLink}} the listener function passed will receive the\nfollowing argument(s): ( {{#crossLink \"F2.AppConfig\"}}appConfig{{/crossLink}}, [appHtml](../../app-development.html#app-design) )",
            "itemtype": "property",
            "name": "APP_RENDER",
            "type": "string",
            "static": 1,
            "final": 1,
            "example": [
                "\n   var _token = F2.AppHandlers.getToken();\n   F2.AppHandlers.on(\n       _token,\n       F2.Constants.AppHandlers.APP_RENDER,\n       function(appConfig, appHtml)\n       {\n           // if no app root is defined use the app's outer most node\n           if(!appConfig.root)\n           {\n               appConfig.root = domify(appHtml);\n           }\n           else\n           {\n               // append the app html to the root\n               appConfig.root.appendChild(domify(appHtml));\n           }\n\n           // append the root to the body by default.\n           document.body.appendChild(appConfig.root);\n       }\n   );"
            ],
            "class": "F2.Constants.AppHandlers"
        },
        {
            "file": "src\\constants\\appHandlers.js",
            "line": 101,
            "description": "Identifies the after app render method for use in AppHandlers.on/off.\nWhen bound using {{#crossLink \"F2.AppHandlers/on\"}}F2.AppHandlers.on(){{/crossLink}} the listener function passed will receive the\nfollowing argument(s): ( {{#crossLink \"F2.AppConfig\"}}appConfig{{/crossLink}} )",
            "itemtype": "property",
            "name": "APP_RENDER_AFTER",
            "type": "string",
            "static": 1,
            "final": 1,
            "example": [
                "\n\tvar _token = F2.AppHandlers.getToken();\n\tF2.AppHandlers.on(\n\t\t_token,\n\t\tF2.Constants.AppHandlers.APP_RENDER_AFTER,\n\t\tfunction(appConfig)\n\t\t{\n\t\t\tF2.log(appConfig);\n\t\t}\n\t);"
            ],
            "class": "F2.Constants.AppHandlers"
        },
        {
            "file": "src\\constants\\appHandlers.js",
            "line": 121,
            "description": "Identifies the before app destroy method for use in AppHandlers.on/off.\nWhen bound using {{#crossLink \"F2.AppHandlers/on\"}}F2.AppHandlers.on(){{/crossLink}} the listener function passed will receive the\nfollowing argument(s): ( appInstance )",
            "itemtype": "property",
            "name": "APP_DESTROY_BEFORE",
            "type": "string",
            "static": 1,
            "final": 1,
            "example": [
                "\n\tvar _token = F2.AppHandlers.getToken();\n\tF2.AppHandlers.on(\n\t\t_token,\n\t\tF2.Constants.AppHandlers.APP_DESTROY_BEFORE,\n\t\tfunction(appInstance)\n\t\t{\n\t\t\tF2.log(appInstance);\n\t\t}\n\t);"
            ],
            "class": "F2.Constants.AppHandlers"
        },
        {
            "file": "src\\constants\\appHandlers.js",
            "line": 141,
            "description": "Identifies the app destroy method for use in AppHandlers.on/off.\nWhen bound using {{#crossLink \"F2.AppHandlers/on\"}}F2.AppHandlers.on(){{/crossLink}} the listener function passed will receive the\nfollowing argument(s): ( appInstance )",
            "itemtype": "property",
            "name": "APP_DESTROY",
            "type": "string",
            "static": 1,
            "final": 1,
            "example": [
                "\n   var _token = F2.AppHandlers.getToken();\n   F2.AppHandlers.on(\n       _token,\n       F2.Constants.AppHandlers.APP_DESTROY,\n       function(appInstance)\n       {\n           // call the apps destroy method, if it has one\n           if(appInstance && appInstance.app && appInstance.app.destroy && typeof(appInstance.app.destroy) == 'function')\n           {\n               appInstance.app.destroy();\n           }\n           else if(appInstance && appInstance.app && appInstance.app.destroy)\n           {\n               F2.log(appInstance.config.appId + ' has a destroy property, but destroy is not of type function and as such will not be executed.');\n           }\n\n           // remove the root\n           appInstance.config.root.parentNode.removeChild(appInstance.config.root);\n       }\n   );"
            ],
            "class": "F2.Constants.AppHandlers"
        },
        {
            "file": "src\\constants\\appHandlers.js",
            "line": 172,
            "description": "Identifies the after app destroy method for use in AppHandlers.on/off.\nWhen bound using {{#crossLink \"F2.AppHandlers/on\"}}F2.AppHandlers.on(){{/crossLink}} the listener function passed will receive the\nfollowing argument(s): ( appInstance )",
            "itemtype": "property",
            "name": "APP_DESTROY_AFTER",
            "type": "string",
            "static": 1,
            "final": 1,
            "example": [
                "\n   var _token = F2.AppHandlers.getToken();\n   F2.AppHandlers.on(\n       _token,\n       F2.Constants.AppHandlers.APP_DESTROY_AFTER,\n       function(appInstance)\n       {\n           F2.log(appInstance);\n       }\n   );"
            ],
            "class": "F2.Constants.AppHandlers"
        },
        {
            "file": "src\\constants\\appHandlers.js",
            "line": 192,
            "description": "Identifies the app script load failed method for use in AppHandlers.on/off.\nWhen bound using {{#crossLink \"F2.AppHandlers/on\"}}F2.AppHandlers.on(){{/crossLink}} the listener function passed will receive the\nfollowing argument(s): ( {{#crossLink \"F2.AppConfig\"}}appConfig{{/crossLink}}, scriptInfo )",
            "itemtype": "property",
            "name": "APP_SCRIPT_LOAD_FAILED",
            "type": "string",
            "static": 1,
            "final": 1,
            "example": [
                "\nvar _token = F2.AppHandlers.getToken();\nF2.AppHandlers.on(\n    _token,\n    F2.Constants.AppHandlers.APP_SCRIPT_LOAD_FAILED,\n    function(appConfig, scriptInfo) {\n        F2.log(appConfig.appId);\n    }\n);"
            ],
            "class": "F2.Constants.AppHandlers"
        },
        {
            "file": "src\\constants\\css.js",
            "line": 7,
            "description": "The APP class should be applied to the DOM Element that surrounds the\nentire app, including any extra html that surrounds the APP\\_CONTAINER\nthat is inserted by the container. See the\n{{#crossLink \"F2.ContainerConfig\"}}{{/crossLink}} object.",
            "itemtype": "property",
            "name": "APP",
            "type": "string",
            "static": 1,
            "final": 1,
            "class": "F2.Constants.Css"
        },
        {
            "file": "src\\constants\\css.js",
            "line": 18,
            "description": "The APP\\_CONTAINER class should be applied to the outermost DOM Element\nof the app.",
            "itemtype": "property",
            "name": "APP_CONTAINER",
            "type": "string",
            "static": 1,
            "final": 1,
            "class": "F2.Constants.Css"
        },
        {
            "file": "src\\constants\\events.js",
            "line": 7,
            "description": "The APP_SCRIPTS_LOADED event is fired when all the scripts defined in\nthe AppManifest have been loaded.",
            "itemtype": "property",
            "name": "APP_SCRIPTS_LOADED",
            "type": "string",
            "static": 1,
            "final": 1,
            "class": "F2.Constants.Events"
        },
        {
            "file": "src\\constants\\events.js",
            "line": 16,
            "description": "The APP\\_SYMBOL\\_CHANGE event is fired when the symbol is changed in an\napp. It is up to the app developer to fire this event.\nReturns an object with the symbol and company name:\n\n    { symbol: 'MSFT', name: 'Microsoft Corp (NASDAQ)' }",
            "itemtype": "property",
            "name": "APP_SYMBOL_CHANGE",
            "type": "string",
            "static": 1,
            "final": 1,
            "class": "F2.Constants.Events"
        },
        {
            "file": "src\\constants\\events.js",
            "line": 29,
            "description": "The APP\\_WIDTH\\_CHANGE event will be fired by the container when the\nwidth of an app is changed. The app's instanceId should be concatenated\nto this constant.\nReturns an object with the gridSize and width in pixels:\n\n    { gridSize:8, width:620 }",
            "itemtype": "property",
            "name": "APP_WIDTH_CHANGE",
            "type": "string",
            "static": 1,
            "final": 1,
            "class": "F2.Constants.Events"
        },
        {
            "file": "src\\constants\\events.js",
            "line": 43,
            "description": "The CONTAINER\\_SYMBOL\\_CHANGE event is fired when the symbol is changed\nat the container level. This event should only be fired by the\ncontainer or container provider.\nReturns an object with the symbol and company name:\n\n    { symbol: 'MSFT', name: 'Microsoft Corp (NASDAQ)' }",
            "itemtype": "property",
            "name": "CONTAINER_SYMBOL_CHANGE",
            "type": "string",
            "static": 1,
            "final": 1,
            "class": "F2.Constants.Events"
        },
        {
            "file": "src\\constants\\events.js",
            "line": 57,
            "description": "The CONTAINER\\_WIDTH\\_CHANGE event will be fired by the container when\nthe width of the container has changed.",
            "itemtype": "property",
            "name": "CONTAINER_WIDTH_CHANGE",
            "type": "string",
            "static": 1,
            "final": 1,
            "class": "F2.Constants.Events"
        },
        {
            "file": "src\\constants\\events.js",
            "line": 66,
            "description": "The CONTAINER\\_LOCALE\\_CHANGE event will be fired by the container when\nthe locale of the container has changed. This event should only be fired by the\ncontainer or container provider.\nReturns an object with the updated locale (IETF-defined standard language tag):\n\n    { locale: 'en-us' }",
            "itemtype": "property",
            "name": "CONTAINER_LOCALE_CHANGE",
            "type": "string",
            "static": 1,
            "final": 1,
            "class": "F2.Constants.Events"
        },
        {
            "file": "src\\utils\\dom.js",
            "line": 1,
            "description": "Utility method to determine whether or not the argument passed in is or is not a native dom node.",
            "itemtype": "method",
            "name": "isNativeNode",
            "params": [
                {
                    "name": "testObject",
                    "description": "The object you want to check as native dom node.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns true if the object passed is a native dom node.",
                "type": "Bool"
            },
            "class": "F2"
        },
        {
            "file": "src\\utils\\index.js",
            "line": 4,
            "description": "A function to pass into F2.stringify which will prevent circular\nreference errors when serializing objects",
            "itemtype": "method",
            "name": "appConfigReplacer",
            "class": "F2"
        },
        {
            "file": "src\\utils\\index.js",
            "line": 16,
            "description": "Creates a namespace on F2 and copies the contents of an object into\nthat namespace optionally overwriting existing properties.",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "ns",
                    "description": "The namespace to create. Pass a falsy value to\nadd properties to the F2 namespace directly.",
                    "type": "String"
                },
                {
                    "name": "obj",
                    "description": "The object to copy into the namespace.",
                    "type": "Object"
                },
                {
                    "name": "overwrite",
                    "description": "True if object properties should be overwritten",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "The created object",
                "type": "Object"
            },
            "class": "F2"
        },
        {
            "file": "src\\utils\\index.js",
            "line": 56,
            "description": "Generates a somewhat random id",
            "itemtype": "method",
            "name": "guid",
            "return": {
                "description": "A random id",
                "type": "String"
            },
            "class": "F2"
        },
        {
            "file": "src\\utils\\index.js",
            "line": 81,
            "description": "Tests a URL to see if it's on the same domain (local) or not",
            "itemtype": "method",
            "name": "isLocal",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "URL to test"
                }
            ],
            "return": {
                "description": "Whether the URL is local or not",
                "type": "Bool"
            },
            "class": "F2"
        },
        {
            "file": "src\\utils\\index.js",
            "line": 88,
            "description": "A utility logging function to write messages or objects to the browser console. This is a proxy for the [`console` API](https://developers.google.com/chrome-developer-tools/docs/console).",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "Object/Method",
                    "description": "An object to be logged _or_ a `console` API method name, such as `warn` or `error`. All of the console method names are [detailed in the Chrome docs](https://developers.google.com/chrome-developer-tools/docs/console-api).",
                    "type": "Object|string"
                },
                {
                    "name": "obj2",
                    "description": "An object to be logged",
                    "type": "Object",
                    "optional": true,
                    "multiple": true
                }
            ],
            "example": [
                "\n\t\t//Pass any object (string, int, array, object, bool) to .log()\n\t\tF2.log('foo');\n\t\tF2.log(myArray);\n\t\t//Use a console method name as the first argument.\n\t\tF2.log('error', err);\n\t\tF2.log('info', 'The session ID is ' + sessionId);\nSome code derived from [HTML5 Boilerplate console plugin](https://github.com/h5bp/html5-boilerplate/blob/master/js/plugins.js)"
            ],
            "class": "F2"
        },
        {
            "file": "src\\utils\\index.js",
            "line": 166,
            "description": "Wrapper to convert a JSON string to an object",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "str",
                    "description": "The JSON string to convert",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The parsed object",
                "type": "Object"
            },
            "class": "F2"
        },
        {
            "file": "src\\utils\\index.js",
            "line": 175,
            "description": "Wrapper to convert an object to JSON\n\n**Note: When using F2.stringify on an F2.AppConfig object, it is\nrecommended to pass F2.appConfigReplacer as the replacer function in\norder to prevent circular serialization errors.**",
            "itemtype": "method",
            "name": "stringify",
            "params": [
                {
                    "name": "value",
                    "description": "The object to convert",
                    "type": "Object"
                },
                {
                    "name": "replacer",
                    "description": "An optional parameter that determines\nhow object values are stringified for objects. It can be a function or an\narray of strings.",
                    "type": "Function|Array"
                },
                {
                    "name": "space",
                    "description": "An optional parameter that specifies the\nindentation of nested structures. If it is omitted, the text will be\npacked without extra whitespace. If it is a number, it will specify the\nnumber of spaces to indent at each level. If it is a string (such as '\\t'\nor '&nbsp;'), it contains the characters used to indent at each level.",
                    "type": "Int|string"
                }
            ],
            "return": {
                "description": "The JSON string",
                "type": "String"
            },
            "class": "F2"
        },
        {
            "file": "src\\utils\\index.js",
            "line": 196,
            "description": "Function to get the F2 version number",
            "itemtype": "method",
            "name": "version",
            "return": {
                "description": "F2 version number",
                "type": "String"
            },
            "class": "F2"
        },
        {
            "file": "src\\utils\\uri.js",
            "line": 1,
            "description": "Tests a URL to see if it's on the same domain (local) or not",
            "itemtype": "method",
            "name": "isLocal",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "URL to test"
                }
            ],
            "return": {
                "description": "Whether the URL is local or not\nDerived from: https://github.com/jquery/jquery/blob/master/src/ajax.js",
                "type": "Bool"
            },
            "class": "F2.AppHandlers"
        },
        {
            "file": "src\\utils\\uri.js",
            "line": 49,
            "description": "Parses URI",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "The URL to parse"
                }
            ],
            "return": {
                "description": "string\nSource: https://gist.github.com/Yaffle/1088850\nTests: http://skew.org/uri/uri_tests.html",
                "type": "Parsed URL"
            },
            "class": "F2.AppHandlers"
        },
        {
            "file": "src\\utils\\uri.js",
            "line": 79,
            "description": "Abosolutizes a relative URL",
            "itemtype": "method",
            "name": "toAbsolute",
            "params": [
                {
                    "name": "base",
                    "description": "",
                    "type": "e.g., location.href"
                },
                {
                    "name": "href",
                    "description": "",
                    "type": "URL to absolutize"
                }
            ],
            "return": {
                "description": "URL\nSource: https://gist.github.com/Yaffle/1088850\nTests: http://skew.org/uri/uri_tests.html",
                "type": "String"
            },
            "class": "F2.AppHandlers"
        },
        {
            "file": "src\\appHandlers.js",
            "line": 180,
            "description": "Allows Container Developer to retrieve a unique token which must be passed to\nall `on` and `off` methods. This function will self destruct and can only be called\none time. Container Developers must store the return value inside of a closure.",
            "itemtype": "method",
            "name": "getToken",
            "class": "F2.AppHandlers"
        },
        {
            "file": "src\\appHandlers.js",
            "line": 193,
            "description": "Allows F2 to get a token internally. Token is required to call {{#crossLink \"F2.AppHandlers/\\_\\_trigger:method\"}}{{/crossLink}}.\nThis function will self destruct to eliminate other sources from using the {{#crossLink \"F2.AppHandlers/\\_\\_trigger:method\"}}{{/crossLink}}\nand additional internal methods.",
            "itemtype": "method",
            "name": "__f2GetToken",
            "access": "private",
            "tagname": "",
            "class": "F2.AppHandlers"
        },
        {
            "file": "src\\appHandlers.js",
            "line": 207,
            "description": "Allows F2 to trigger specific events internally.",
            "itemtype": "method",
            "name": "__trigger",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "params": [
                {
                    "name": "token",
                    "description": "The token received from {{#crossLink \"F2.AppHandlers/\\_\\_f2GetToken:method\"}}{{/crossLink}}.",
                    "type": "String"
                },
                {
                    "name": "eventKey",
                    "description": "The event to fire. The complete list of event keys is available in {{#crossLink \"F2.Constants.AppHandlers\"}}{{/crossLink}}.",
                    "type": "String"
                }
            ],
            "class": "F2.AppHandlers"
        },
        {
            "file": "src\\appHandlers.js",
            "line": 283,
            "description": "Allows Container Developer to easily tell all apps to render in a specific location. Only valid for eventType `appRender`.",
            "itemtype": "method",
            "name": "on",
            "chainable": 1,
            "params": [
                {
                    "name": "token",
                    "description": "The token received from {{#crossLink \"F2.AppHandlers/getToken:method\"}}{{/crossLink}}.",
                    "type": "String"
                },
                {
                    "name": "eventKey{.namespace}",
                    "description": "The event key used to determine which event to attach the listener to. The namespace is useful for removal\npurposes. At this time it does not affect when an event is fired. Complete list of event keys available in\n{{#crossLink \"F2.Constants.AppHandlers\"}}{{/crossLink}}.",
                    "type": "String"
                },
                {
                    "name": "element",
                    "description": "Specific DOM element to which app gets appended.",
                    "type": "HTMLElement"
                }
            ],
            "example": [
                "\n\tvar _token = F2.AppHandlers.getToken();\n\tF2.AppHandlers.on(\n\t\t_token,\n\t\t'appRender',\n\t\tdocument.getElementById('my_app')\n\t);\n\nOr:",
                "\n\tF2.AppHandlers.on(\n\t\t_token,\n\t\t'appRender.myNamespace',\n\t\tdocument.getElementById('my_app')\n\t);"
            ],
            "class": "F2.AppHandlers"
        },
        {
            "file": "src\\appHandlers.js",
            "line": 308,
            "description": "Allows Container Developer to add listener method that will be triggered when a specific event occurs.",
            "itemtype": "method",
            "name": "on",
            "chainable": 1,
            "params": [
                {
                    "name": "token",
                    "description": "The token received from {{#crossLink \"F2.AppHandlers/getToken:method\"}}{{/crossLink}}.",
                    "type": "String"
                },
                {
                    "name": "eventKey{.namespace}",
                    "description": "The event key used to determine which event to attach the listener to. The namespace is useful for removal\npurposes. At this time it does not affect when an event is fired. Complete list of event keys available in\n{{#crossLink \"F2.Constants.AppHandlers\"}}{{/crossLink}}.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "A function that will be triggered when a specific event occurs. For detailed argument definition refer to {{#crossLink \"F2.Constants.AppHandlers\"}}{{/crossLink}}.",
                    "type": "Function"
                }
            ],
            "example": [
                "\n\tvar _token = F2.AppHandlers.getToken();\n\tF2.AppHandlers.on(\n\t\t_token,\n\t\t'appRenderBefore'\n\t\tfunction() { F2.log('before app rendered!'); }\n\t);\n\nOr:",
                "\n\tF2.AppHandlers.on(\n\t\t_token,\n\t\t'appRenderBefore.myNamespace',\n\t\tfunction() { F2.log('before app rendered!'); }\n\t);"
            ],
            "class": "F2.AppHandlers"
        },
        {
            "file": "src\\appHandlers.js",
            "line": 362,
            "description": "Allows Container Developer to remove listener methods for specific events",
            "itemtype": "method",
            "name": "off",
            "chainable": 1,
            "params": [
                {
                    "name": "token",
                    "description": "The token received from {{#crossLink \"F2.AppHandlers/getToken:method\"}}{{/crossLink}}.",
                    "type": "String"
                },
                {
                    "name": "eventKey{.namespace}",
                    "description": "The event key used to determine which event to attach the listener to. If no namespace is provided all\n listeners for the specified event type will be removed.\n Complete list available in {{#crossLink \"F2.Constants.AppHandlers\"}}{{/crossLink}}.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar _token = F2.AppHandlers.getToken();\n\tF2.AppHandlers.off(_token,'appRenderBefore');\n"
            ],
            "class": "F2.AppHandlers"
        },
        {
            "file": "src\\apps.js",
            "line": 1,
            "description": "The apps namespace is a place for app developers to put the javascript\nclass that is used to initialize their app. The javascript classes should\nbe namepaced with the {{#crossLink \"F2.AppConfig\"}}{{/crossLink}}.appId.\nIt is recommended that the code be placed in a closure to help keep the\nglobal namespace clean.\n\nIf the class has an 'init' function, that function will be called\nautomatically by F2.",
            "itemtype": "property",
            "name": "Apps",
            "type": "object",
            "example": [
                "\n    F2.Apps[\"com_example_helloworld\"] = (function() {\n        var App_Class = function(appConfig, appContent, root) {\n            this._app = appConfig; // the F2.AppConfig object\n            this._appContent = appContent // the F2.AppManifest.AppContent object\n            this.$root = root; // the root DOM Element that contains this app\n        }\n\n        App_Class.prototype.init = function() {\n            // perform init actions\n        }\n\n        return App_Class;\n    })();",
                "\n    F2.Apps[\"com_example_helloworld\"] = function(appConfig, appContent, root) {\n       return {\n           init:function() {\n               // perform init actions\n           }\n       };\n    };"
            ],
            "class": "F2"
        },
        {
            "file": "src\\container.js",
            "line": 17,
            "description": "Search for a value within an array.",
            "itemtype": "method",
            "name": "inArray",
            "params": [
                {
                    "name": "value",
                    "description": "The value to search for",
                    "type": "Object"
                },
                {
                    "name": "array",
                    "description": "The array to search",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "index of the value in the array, -1 if value not found",
                "type": "Int"
            },
            "class": "F2"
        },
        {
            "file": "src\\container.js",
            "line": 38,
            "description": "Adds properties to the AppConfig object",
            "itemtype": "method",
            "name": "_createAppConfig",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "appConfig",
                    "description": "The F2.AppConfig object",
                    "type": "F2.AppConfig"
                }
            ],
            "return": {
                "description": "The new F2.AppConfig object, prepopulated with\nnecessary properties",
                "type": "F2.AppConfig"
            },
            "class": "F2"
        },
        {
            "file": "src\\container.js",
            "line": 61,
            "description": "Generate an AppConfig from the element's attributes",
            "itemtype": "method",
            "name": "_getAppConfigFromElement",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "node",
                    "description": "The DOM node from which to generate the F2.AppConfig object",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "The new F2.AppConfig object",
                "type": "F2.AppConfig"
            },
            "class": "F2"
        },
        {
            "file": "src\\container.js",
            "line": 102,
            "description": "Returns true if the DOM node has children that are not text nodes",
            "itemtype": "method",
            "name": "_hasNonTextChildNodes",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "node",
                    "description": "The DOM node",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "True if there are non-text children",
                "type": "Bool"
            },
            "class": "F2"
        },
        {
            "file": "src\\container.js",
            "line": 124,
            "description": "Adds properties to the ContainerConfig object to take advantage of defaults",
            "itemtype": "method",
            "name": "_hydrateContainerConfig",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "containerConfig",
                    "description": "The F2.ContainerConfig object",
                    "type": "F2.ContainerConfig"
                }
            ],
            "class": "F2"
        },
        {
            "file": "src\\container.js",
            "line": 145,
            "description": "Attach container Events",
            "itemtype": "method",
            "name": "_initContainerEvents",
            "access": "private",
            "tagname": "",
            "class": "F2"
        },
        {
            "file": "src\\container.js",
            "line": 170,
            "description": "Checks if an element is a placeholder element",
            "itemtype": "method",
            "name": "_isPlaceholderElement",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "node",
                    "description": "The DOM element to check",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "True if the element is a placeholder",
                "type": "Bool"
            },
            "class": "F2"
        },
        {
            "file": "src\\container.js",
            "line": 186,
            "description": "Has the container been init?",
            "itemtype": "method",
            "name": "_isInit",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "True if the container has been init",
                "type": "Bool"
            },
            "class": "F2"
        },
        {
            "file": "src\\container.js",
            "line": 196,
            "description": "Instantiates each app from it's appConfig and stores that in a local private collection",
            "itemtype": "method",
            "name": "_createAppInstance",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "appConfigs",
                    "description": "An array of {{#crossLink \"F2.AppConfig\"}}{{/crossLink}} objects",
                    "type": "Array"
                }
            ],
            "class": "F2"
        },
        {
            "file": "src\\container.js",
            "line": 236,
            "description": "Loads the app's html/css/javascript",
            "itemtype": "method",
            "name": "loadApp",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "appConfigs",
                    "description": "An array of\n{{#crossLink \"F2.AppConfig\"}}{{/crossLink}} objects",
                    "type": "Array"
                },
                {
                    "name": "appManifest",
                    "description": "The AppManifest object",
                    "type": "F2.AppManifest",
                    "optional": true
                }
            ],
            "class": "F2"
        },
        {
            "file": "src\\container.js",
            "line": 610,
            "description": "Checks if the app is valid",
            "itemtype": "method",
            "name": "_validateApp",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "appConfig",
                    "description": "The F2.AppConfig object",
                    "type": "F2.AppConfig"
                }
            ],
            "return": {
                "description": "True if the app is valid",
                "type": "Bool"
            },
            "class": "F2"
        },
        {
            "file": "src\\container.js",
            "line": 630,
            "description": "Checks if the ContainerConfig is valid",
            "itemtype": "method",
            "name": "_validateContainerConfig",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "True if the config is valid",
                "type": "Bool"
            },
            "class": "F2"
        },
        {
            "file": "src\\container.js",
            "line": 665,
            "description": "Gets the current list of apps in the container",
            "itemtype": "method",
            "name": "getContainerState",
            "return": {
                "description": "An array of objects containing the appId",
                "type": "Array"
            },
            "class": "F2",
            "module": "f2"
        },
        {
            "file": "src\\container.js",
            "line": 686,
            "description": "Gets the current locale defined by the container",
            "itemtype": "method",
            "name": "getContainerLocale",
            "return": {
                "description": "IETF-defined standard language tag",
                "type": "String"
            },
            "class": "F2",
            "module": "f2"
        },
        {
            "file": "src\\container.js",
            "line": 699,
            "description": "Initializes the container. This method must be called before performing\nany other actions in the container.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "config",
                    "description": "The configuration object",
                    "type": "F2.ContainerConfig"
                }
            ],
            "class": "F2",
            "module": "f2"
        },
        {
            "file": "src\\container.js",
            "line": 715,
            "description": "Has the container been init?",
            "itemtype": "method",
            "name": "isInit",
            "return": {
                "description": "True if the container has been init",
                "type": "Bool"
            },
            "class": "F2",
            "module": "f2"
        },
        {
            "file": "src\\container.js",
            "line": 721,
            "description": "Automatically load apps that are already defined in the DOM. Elements will\nbe rendered into the location of the placeholder DOM element. Any AppHandlers\nthat are defined will be bypassed.",
            "itemtype": "method",
            "name": "loadPlaceholders",
            "params": [
                {
                    "name": "parentNode",
                    "description": "The element to search for placeholder apps",
                    "type": "Element"
                }
            ],
            "class": "F2",
            "module": "f2"
        },
        {
            "file": "src\\container.js",
            "line": 774,
            "description": "Begins the loading process for all apps and/or initialization process for pre-loaded apps.\nThe app will be passed the {{#crossLink \"F2.AppConfig\"}}{{/crossLink}} object which will\ncontain the app's unique instanceId within the container. If the\n{{#crossLink \"F2.AppConfig\"}}{{/crossLink}}.root property is populated the app is considered\nto be a pre-loaded app and will be handled accordingly. Optionally, the\n{{#crossLink \"F2.AppManifest\"}}{{/crossLink}} can be passed in and those\nassets will be used instead of making a request.",
            "itemtype": "method",
            "name": "registerApps",
            "params": [
                {
                    "name": "appConfigs",
                    "description": "An array of {{#crossLink \"F2.AppConfig\"}}{{/crossLink}}\nobjects",
                    "type": "Array"
                },
                {
                    "name": "appManifests",
                    "description": "An array of\n{{#crossLink \"F2.AppManifest\"}}{{/crossLink}}\nobjects. This array must be the same length as the apps array that is\nobjects. This array must be the same length as the apps array that is\npassed in. This can be useful if apps are loaded on the server-side and\npassed down to the client.",
                    "type": "Array",
                    "optional": true
                }
            ],
            "example": [
                "\nTraditional App requests.\n\n\t// Traditional f2 app configs\n\tvar arConfigs = [\n\t\t{\n\t\t\tappId: 'com_externaldomain_example_app',\n\t\t\tcontext: {},\n\t\t\tmanifestUrl: 'http://www.externaldomain.com/F2/AppManifest'\n\t\t},\n\t\t{\n\t\t\tappId: 'com_externaldomain_example_app',\n\t\t\tcontext: {},\n\t\t\tmanifestUrl: 'http://www.externaldomain.com/F2/AppManifest'\n\t\t},\n\t\t{\n\t\t\tappId: 'com_externaldomain_example_app2',\n\t\t\tcontext: {},\n\t\t\tmanifestUrl: 'http://www.externaldomain.com/F2/AppManifest'\n\t\t}\n\t];\n\n\tF2.init();\n\tF2.registerApps(arConfigs);",
                "\nPre-loaded and tradition apps mixed.\n\n\t// Pre-loaded apps and traditional f2 app configs\n\t// you can preload the same app multiple times as long as you have a unique root for each\n\tvar arConfigs = [\n\t\t{\n\t\t\tappId: 'com_mydomain_example_app',\n\t\t\tcontext: {},\n\t\t\troot: 'div#example-app-1',\n\t\t\tmanifestUrl: ''\n\t\t},\n\t\t{\n\t\t\tappId: 'com_mydomain_example_app',\n\t\t\tcontext: {},\n\t\t\troot: 'div#example-app-2',\n\t\t\tmanifestUrl: ''\n\t\t},\n\t\t{\n\t\t\tappId: 'com_externaldomain_example_app',\n\t\t\tcontext: {},\n\t\t\tmanifestUrl: 'http://www.externaldomain.com/F2/AppManifest'\n\t\t}\n\t];\n\n\tF2.init();\n\tF2.registerApps(arConfigs);",
                "\nApps with predefined manifests.\n\n\t// Traditional f2 app configs\n\tvar arConfigs = [\n\t\t{appId: 'com_externaldomain_example_app', context: {}},\n\t\t{appId: 'com_externaldomain_example_app', context: {}},\n\t\t{appId: 'com_externaldomain_example_app2', context: {}}\n\t];\n\n\t// Pre requested manifest responses\n\tvar arManifests = [\n\t\t{\n\t\t\tapps: ['<div>Example App!</div>'],\n\t\t\tinlineScripts: [],\n\t\t\tscripts: ['http://www.domain.com/js/AppClass.js'],\n\t\t\tstyles: ['http://www.domain.com/css/AppStyles.css']\n\t\t},\n\t\t{\n\t\t\tapps: ['<div>Example App!</div>'],\n\t\t\tinlineScripts: [],\n\t\t\tscripts: ['http://www.domain.com/js/AppClass.js'],\n\t\t\tstyles: ['http://www.domain.com/css/AppStyles.css']\n\t\t},\n\t\t{\n\t\t\tapps: ['<div>Example App 2!</div>'],\n\t\t\tinlineScripts: [],\n\t\t\tscripts: ['http://www.domain.com/js/App2Class.js'],\n\t\t\tstyles: ['http://www.domain.com/css/App2Styles.css']\n\t\t}\n\t];\n\n\tF2.init();\n\tF2.registerApps(arConfigs, arManifests);"
            ],
            "class": "F2",
            "module": "f2"
        },
        {
            "file": "src\\container.js",
            "line": 1136,
            "description": "Removes all apps from the container",
            "itemtype": "method",
            "name": "removeAllApps",
            "class": "F2",
            "module": "f2"
        },
        {
            "file": "src\\container.js",
            "line": 1154,
            "description": "Removes an app from the container",
            "itemtype": "method",
            "name": "removeApp",
            "params": [
                {
                    "name": "instanceId",
                    "description": "The app's instanceId",
                    "type": "String"
                }
            ],
            "class": "F2",
            "module": "f2"
        },
        {
            "file": "src\\events.js",
            "line": 18,
            "description": "Execute each of the listeners that may be listening for the specified\nevent name in order with the list of arguments.",
            "itemtype": "method",
            "name": "emit",
            "params": [
                {
                    "name": "event",
                    "description": "The event name",
                    "type": "String"
                },
                {
                    "name": "arg",
                    "description": "The arguments to be passed",
                    "type": "Object",
                    "optional": true,
                    "multiple": true
                }
            ],
            "class": "F2.Events",
            "module": "f2"
        },
        {
            "file": "src\\events.js",
            "line": 31,
            "description": "Adds a listener that will execute n times for the event before being\nremoved. The listener is invoked only the first time the event is\nfired, after which it is removed.",
            "itemtype": "method",
            "name": "many",
            "params": [
                {
                    "name": "event",
                    "description": "The event name",
                    "type": "String"
                },
                {
                    "name": "timesToListen",
                    "description": "The number of times to execute the event\nbefore being removed",
                    "type": "Int"
                },
                {
                    "name": "listener",
                    "description": "The function to be fired when the event is\nemitted",
                    "type": "Function"
                }
            ],
            "class": "F2.Events",
            "module": "f2"
        },
        {
            "file": "src\\events.js",
            "line": 45,
            "description": "Remove a listener for the specified event.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "event",
                    "description": "The event name",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The function that will be removed",
                    "type": "Function"
                }
            ],
            "class": "F2.Events",
            "module": "f2"
        },
        {
            "file": "src\\events.js",
            "line": 54,
            "description": "Adds a listener for the specified event",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "event",
                    "description": "The event name",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The function to be fired when the event is\nemitted",
                    "type": "Function"
                }
            ],
            "class": "F2.Events",
            "module": "f2"
        },
        {
            "file": "src\\events.js",
            "line": 64,
            "description": "Adds a one time listener for the event. The listener is invoked only\nthe first time the event is fired, after which it is removed.",
            "itemtype": "method",
            "name": "once",
            "params": [
                {
                    "name": "event",
                    "description": "The event name",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The function to be fired when the event is\nemitted",
                    "type": "Function"
                }
            ],
            "class": "F2.Events",
            "module": "f2"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src\\appHandlers.js:283"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src\\appHandlers.js:308"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\container.js:610"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\container.js:630"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\container.js:665"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\container.js:686"
        }
    ]
}